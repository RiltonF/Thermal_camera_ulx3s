#!/usr/bin/env python

import sys
import os
import serial
from math import floor

parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, parent_dir)

from mlx_mem_chess_pattern_generator import gen_page0, gen_page1
from serial_capture import get_dump, to_signed
from rp2040_frame_dump import frame_dump, frame_dump2

import numpy as np
import matplotlib.pyplot as plt

eeData = [188, 27039, 0, 8289, 5, 800, 992, 3098, 60940, 393, 1177, 0, 6401, 0, 4096, 48691, 16912, 65489, 514, 514, 514, 61937, 57825, 41168, 65023, 65024, 65265, 65281, 61443, 61444, 57604, 49651, 34965, 15163, 60858, 4367, 12834, 13107, 34, 52735, 61148, 4352, 8738, 9011, 8755, 18, 57072, 43725, 5981, 12208, 8534, 42374, 17203, 57813, 21590, 19536, 9059, 118, 6094, 828, 62976, 50636, 38833, 9833, 63664, 48, 6174, 60494, 65502, 64590, 6110, 62366, 63582, 2014, 6222, 60508, 63566, 64574, 6062, 60622, 64512, 65422, 4174, 61404, 63470, 64624, 4222, 60416, 65376, 64448, 3056, 61456, 63424, 63522, 4290, 59472, 2192, 1038, 63502, 4142, 3022, 46, 63452, 4992, 1088, 3038, 63548, 4190, 2080, 30, 64396, 4272, 3056, 1918, 61484, 5056, 978, 110, 62556, 5088, 3922, 958, 62430, 7152, 2992, 1040, 63630, 4146, 64622, 48, 5134, 61390, 65486, 64624, 6126, 60430, 65534, 30, 5246, 59518, 62574, 63502, 5998, 59630, 62510, 64430, 3088, 59406, 62462, 64576, 4206, 59422, 64384, 62464, 4000, 60496, 65360, 62560, 4226, 59490, 3138, 30, 63468, 5040, 4000, 64606, 63436, 4080, 3038, 2044, 63564, 4158, 1072, 1996, 64316, 3246, 2032, 1918, 63452, 4048, 978, 62, 62558, 5104, 3938, 976, 63374, 5168, 3874, 46, 62558, 4146, 3024, 992, 7072, 62462, 62, 30, 6078, 62462, 94, 78, 5166, 60542, 2046, 64544, 5022, 60558, 2016, 64494, 5070, 61422, 61472, 64608, 4240, 59518, 62494, 63504, 3984, 61506, 62464, 62610, 4146, 61408, 7090, 1952, 64380, 4032, 3072, 1006, 64414, 5070, 3088, 1038, 64492, 3134, 5040, 988, 63340, 4174, 5024, 910, 63372, 5022, 976, 1054, 62556, 4128, 3058, 1008, 63326, 5120, 2994, 64592, 64510, 5042, 63584, 64450, 6126, 0, 63552, 64590, 6078, 61360, 65486, 64544, 5294, 58400, 65502, 65518, 5070, 59454, 65440, 64368, 3150, 61358, 62384, 64624, 4192, 58494, 65394, 61568, 3952, 60512, 65330, 64530, 4130, 58400, 162, 64526, 44062, 2208, 64656, 64636, 63486, 4080, 1008, 94, 62684, 3152, 2048, 64526, 62460, 3184, 65504, 65454, 60556, 5056, 978, 144, 61612, 3216, 1970, 63694, 63422, 4258, 3956, 94, 62558, 3154, 64562, 48, 5214, 60544, 64512, 64592, 6110, 60478, 64528, 1040, 5294, 61438, 64526, 65520, 4976, 60606, 864, 63488, 4048, 61392, 63328, 64608, 4222, 61390, 65378, 63568, 2048, 60496, 64384, 64528, 3184, 59408, 1138, 63584, 60558, 1202, 1088, 63584, 60428, 1104, 1072, 62, 60620, 2062, 1056
, 64542, 61356, 2256, 2962, 63534, 60428, 2048, 882, 110, 61580, 4064, 3972, 63630, 59438, 4224, 1986, 64576, 61584, 3138, 1232, 64530, 5296, 61662, 2112, 64770, 6128, 62448, 80, 64608, 4288, 61518, 64654, 64512, 4992, 60574, 64544, 63534, 3088, 61312, 63392, 64624, 4144, 60512, 65490, 62640, 1074, 60638, 63456, 63666, 2244, 59474, 64644, 64432, 60526, 112, 3026, 61614, 60318, 1936, 65506, 65534, 60540, 1022, 2, 64414, 61214, 1086, 1970, 63422, 59326, 3872
, 65346, 65534, 61422, 3040, 2898, 62542, 59342, 2176, 65410, 63568, 60526, 2018, 1138, 4162, 7234, 63664, 3056, 3184, 8176, 65392, 64, 4096, 9168, 62560, 2976, 2990, 7088, 63614, 2, 2944, 7070, 64478, 65456, 2210, 6240, 63504, 1968, 3058, 6034, 63664, 978, 1122, 6258, 64482, 1170, 63552, 61520, 1218, 1042, 64624, 60446, 3984, 82, 1038, 63486, 3184, 2992, 942, 62398, 4208, 1042, 912, 62382, 5088, 1970, 1200, 62590, 4128, 4052, 2032, 63390, 5312, 3042, 1120
, 62606, 6130, 64624, 4160, 8080, 62608, 48, 2128, 7088, 63456, 62, 5086, 8128, 63486, 1904, 2992, 6974, 63504, 976, 1904, 5072, 63360, 65328, 2144, 5152, 63456, 914, 1056, 5024, 63584, 65408, 3058, 5184, 64482, 63602, 62528, 60334, 64656, 64594, 62528, 59326, 2016, 64594, 65502, 61374, 2032, 1906, 64446, 60222, 3088, 978, 65392, 59342, 2928, 818, 64608, 60478, 4064, 2948, 64544, 60334, 4192, 1922, 2016, 61504, 5106, 1058, 3122, 7136, 62496, 66, 1090, 5024
, 63440, 1952, 2082, 5088, 63456, 2944, 1986, 3920, 61566, 1968, 1872, 4032, 63406, 65392, 1170, 4146, 63424, 65458, 1058, 3008, 63568, 63392, 3024, 2210, 61506, 2084, 16, 62400, 3090, 2100, 64560, 61358, 3010, 4004, 1040, 62446, 
4048, 5986, 944, 62302, 4192, 5010, 2896, 62368, 6048, 2930, 2160, 62510, 7106, 4020, 1056, 62398, 6210, 4004, 4032, 63648, 6194, 60706, 2146, 3138, 61570, 63538, 1186, 3090, 60480, 62576, 3040, 4208, 60510, 63520, 34, 3040, 61504, 64482, 1008, 2130, 62368, 63346, 258, 3218, 61536, 62466, 146, 2016, 61712, 62482, 242, 2290, 62530, 60692, 62544, 57360, 98, 64516, 61584, 57344, 50, 63602, 65504, 58478, 1088, 2, 63504, 59344, 2096, 962, 64464, 57422, 3970, 882, 64752, 60560, 3154, 2020, 112, 60384, 4338, 2034, 1218, 60624, 5154, 61634, 4114, 6066, 63536, 62544, 3156, 6098, 62528, 64528, 4144, 7152, 63488, 992, 4034, 6096, 63568, 1872, 3968, 5074, 64418, 65410, 4210, 5170, 64560, 866, 
3106, 4976, 64, 65490, 4146, 4242, 16, 60564, 63474, 58240, 2, 62500, 62496, 58256, 18, 65508, 64528, 60368, 3042, 962, 65424, 59312, 3138, 1860, 848, 60352, 4994, 882, 96, 61472, 5138, 3908, 3056, 62304, 7202, 4004, 4080, 62560, 8162, 61602, 4036, 3986, 63474, 882, 3012, 2994, 62386, 63504, 3090, 5040, 62450, 65488, 2082, 2016, 62562, 65490, 3888, 2098, 63362, 64386, 3266, 4178, 64480, 62384, 4082, 1888, 64642, 62368, 5076, 48, 1986, 63732, 18, 60386, 3140, 3012, 18, 58368, 3076, 1108, 1104, 61440, 2130, 3122, 128, 60480, 4290, 3122, 3986, 60560, 8178, 4068, 3346, 63664, 9268, 4116, 5186, 64432, 8386, 6130, 7202, 128, 11282]

ffc_frame_mean_single = -90
ffc_frame_single = [-74, -73, -60, -76, -72, -70, -59, -77, -70, -71, -59, -79, -71, -70, -58, -78, -65, -71, -57, -78, -66, -70, -56, -78, -62, -71, -57, -79, -67, -73, -53, -83, -81, -80, -83, -73, -78, -80, -83, -75, -78, -80, -81, -75, -76, -80, -81, -75, -72, -79, -79, -75, -70, -77, -77, -73, -67, -79, -76, -72, -69, -79, -74, -78, -73, -72, -60, -76, -71, -72, -60, -79, -71, -72, -60, -79, -71, -72, -59, -79, -67, -71, -58, -77, -65, -71, -55, -79, -65, -72, -55, -80, -66, -72, -53, -85, -78, -81, -85, -75, -77, -81, -85, -75, -77, -79, -82, -77, -76, -78, -80, -76, -73, -78, -78, -75, -70, -79, -79, -75, -68, -79, -75, -74, -69, -81, -74, -79, -69, -71, -61, -75, -70, -70, -60, -77, -69, -72, -61, -78, -69, -72, -61, -76, -65, -72, -57, -77, -68, -71, -55, -78, -65, -72, -56, -77, -67, -74, -53, -81, -74, -79, -85, -74, -77, -79, -83, -76, -75, -79, -82, -76, -73, -80, -81, -75, -70, -79, -78, -75, -71, -78, -79, -74, -69, -79, -76, -74, -71, -80, -75, -81, -74, -73, -60, -9921, -74, -72, -59, -78, -70, -72, -62, -79, -71, -70, -59, -81, -65, -72, -58, -79, -65, -72, -57, -78, -65, -75, -53, -80, -65, -73, -53, -85, -83, -82, -101, -77, -82, -81, -84, -77, -78, -82, -84, -78, -75, -80, -83, -76, -74, -81, -80, -74, -71, -77, -77, -76, -70, -79, -76, -77, -69, -80, -74, -80, -73, -72, -61, -79, -73, -71, -61, -78, -71, -71, -62, -79, -71, -73, -60, -79, -66, -71, -58, -78, -66, -71, -57, -77, -64, -73, -56, -78, -68, -73, -55, -84, -81, -83, -86, -77, -80, -82, -86, -78, -77, -81, -87, -77, -78, -82, -83, -77, -72, -82, -80, -77, -72, -79, -79, -74, -68, -81, -79, -75, -70, -79, -76, -81, -73, -72, -62, -76, -68, -71, -61, -78, -69, -73, -62, -77, -70, -74, -59, -77, -65, -72, -60, -78, -65, -71, -56, -78, -62, -72, -59, -80, -67, -75, -57, -85, -82, -82, -88, -79, -79, -83, -85, -79, -80, -83, -87, -77, -75, -81, -84, -78, -74, -84, -84, -76, -72, -79, -81, -77, -70, -81, -79, -77, -74, -82, -78, -82, -77, -72, -64, -79, -74, -71, -61, -79, -75, -73, -63, -82, -73, -71, -62, -80, -65, -73, -61, -81, -68, -73, -59, -79, -66, -72, -58, -80, -68, -76, -56, -85, -87, -88, -92, -83, -82, -87, -90, -78, -82, -84, -88, -81, -83, -84, -87, -79, -77, -83, -84, -80, -75, -82, -83, -78, -73, -81, -81, -80, -75, -84, -81, -83, -80, -72, -66, -80, -76, -72, -66, -80, -74, -73, -64, -81, -71, -74, -60, -80, -70, -72, -62, -81, -67, -72, -60, -80, -65, -74, -58, -82, -69, -75, -57, -86, -90, -90, -92, -85, -88, -88, -92, -84, -83, -88, -87, -82, -81, -85, -91, -80, -78, -85, -87, -81, -75, -84, -85, -81, -74, -84, -84, -79, -75, -85, -82, -85, -77, -71, -66, -80, -75, -72, -68, -81, -73, -75, -67, -80, -72, -76, -65, -81, -70, -72, -63, -80, -69, -74, -61, -79, -70, -74, -61, -81, -72, -72, -61, -84, -89, -88, -97, -85, -89, -88, -97, -85, -85, -89, -94, -85, -82, -88, -90, -83, -79, -86, -89, -82, -77, -87, -88, -83, -77, -86, -84, -82, -79, -86, -85, -87, -84, -75, -67, -80, -78, -75, -68, -83, -78, -76, -67, -83, -76, -75, -66, -83, -72, -75, -63, -81, -70, -74, -63, -82, -72, -74, -61, -83, -71, -75, -61, -87, -97, -94, -100, -87, -92, -91, -99, -87, -91, -91, -96, -88, -82, -91, -94, -84, -82, -90, -94, -85, -79, -87, -91, -83, -79, -86, -88, -85, -79, -88, -86, -87, -87, -75, -71, -84, -83, -77, -70, -85, -78, -77, -69, -85, -79, -75, -69, -84, -75, -74, -66, -84, -72, -75, -65, -84, -71, -73, -64, -82, -72, -76, -63, -87, -102, -97, -104, -87, -97, -95, -105, -92, -94, -95, -100, -89, -92, -94, -99, -90, -85, -92, -96, -89, -86, -90, -93, -86, -81, -90, -89, -83, -82, -90, -90, -90, -87, -75, -73, -84, -80, -76, -75, -85, -80, -79, -73, -85, -80, -77, -73, -84, -77, -76, -68, -84, -73, -76, -66, -84, -76, -75, -68, -85, -77, -75, -67, -85, -112, -107, -117, -102, -106, -105, -118, -101, -102, -105, -110, -102, -100, -105, -110, -98, -95, -99, -107, -97, -93, -100, -104, -95, -91, -100, -100, -98, -92, -99, -100, -97]

ffc_frame_mean = -53
ffc_frame = [-51, -49, -42, -52, -48, -50, -41, -53, -47, -50, -39, -52, -47, -50, -40, -53, -44, -49, -39, -53, -43, -49, -38, -53, -42, -49, -39, -52, -44, -50, -36, -55, -53, -54, -58, -49, -53, -54, -57, -49, -53, -54, -56, -50, -51, -54, -54, -50, -49, -52, -54, -49, -48, -52, -53, -49, -45, -51, -52, -49, -47, -53, -50, -52, -50, -50, -43, -53, -49, -50, -42, -54, -47, -50, -41, -53, -49, -50, -39, -53, -45, -49, -40, -53, -44, -49, -39, -53, -43, -49, -38, -54, -43, -51, -36, -57, -54, -54, -58, -49, -52, -54, -57, -50, -52, -54, -56, -50, -52, -52, -55, -50, -49, -53, -54, -49, -48, -52, -52, -49, -45, -52, -51, -49, -46, -53, -50, -53, -47, -50, -43, -52, -48, -49, -42, -52, -47, -51, -41, -53, -46, -49, -41, -52, -43, -49, -39, -52, -44, -49, -39, -52, -44, -49, -37, -52, -44, -51, -36, -55, -52, -53, -57, -50, -52, -53, -57, -49, -51, -54, -57, -50, -50, -54, -55, -51, -47, -53, -53, -49, -48, -52, -53, -49, -46, -52, -52, -49, -46, -53, -51, -52, -51, -51, -43, -43, -50, -49, -42, -53, -47, -51, -42, -55, -48, -50, -41, -53, -44, -50, -40, -53, -44, -49, -39, -54, -42, -51, -38, -53, -43, -50, -36, -57, -57, -55, -70, -52, -55, -54, -57, -52, -53, -55, -57, -50, -52, -55, -57, -51, -50, -53, -55, -50, -48, -53, -54, -49, -47, -54, -52, -50, -47, -53, -51, -52, -50, -50, -43, -54, -49, -49, -43, -54, -48, -50, -43, -53, -48, -49, -40, -54, -44, -50, -40, -53, -44, -48, -39, -52, -42, -49, -39, -53, -44, -50, -37, -56, -55, -57, -60, -53, -53, -54, -58, -53, -54, -55, -59, -52, -53, -55, -57, -52, -48, -55, -56, -51, -48, -53, -55, -50, -46, -54, -53, -50, -48, -54, -51, -53, -49, -51, -44, -52, -47, -50, -43, -53, -47, -51, -43, -53, -48, -49, -42, -52, -44, -50, -40, -53, -43, -49, -39, -52, -42, -50, -39, -53, -45, -51, -38, -57, -57, -56, -60, -53, -53, -56, -59, -52, -54, -55, -59, -52, -51, -55, -57, -53, -49, -55, -56, -50, -49, -53, -54, -51, -47, -55, -53, -51, -49, -55, -52, -54, -52, -50, -44, -54, -50, -49, -44, -53, -50, -51, -43, -55, -48, -50, -42, -54, -44, -51, -41, -54, -45, -50, -40, -54, -44, -50, -39, -54, -46, -51, -38, -57, -59, -60, -63, -55, -57, -58, -62, -54, -56, -57, -61, -55, -55, -56, -60, -54, -53, -56, -57, -53, -51, -56, -57, -52, -49, -55, -54, -53, -50, -55, -53, -54, -54, -50, -45, -55, -52, -50, -44, -56, -51, -51, -44, -55, -51, -51, -44, -54, -47, -51, -43, -55, -45, -51, -41, -53, -44, -51, -42, -55, -46, -51, -38, -57, -62, -60, -65, -58, -59, -59, -63, -56, -58, -59, -62, -55, -55, -58, -61, -54, -55, -57, -59, -54, -52, -56, -59, -53, -50, -56, -56, -53, -52, -56, -55, -56, -53, -50, -46, -53, -50, -51, -47, -54, -50, -52, -46, -55, -49, -51, -45, -55, -46, -50, -43, -55, -45, -50, -41, -53, -46, -51, -43, -54, -47, -51, -41, -57, -61, -61, -65, -58, -60, -60, -65, -57, -58, -60, -64, -56, -57, -60, -62, -57, -54, -58, -61, -54, -53, -58, -59, -54, -52, -57, -58, -55, -53, -56, -57, -57, -57, -51, -49, -56, -54, -51, -47, -56, -53, -51, -47, -57, -51, -52, -45, -56, -48, -51, -44, -55, -48, -51, -43, -55, -47, -51, -42, -56, -48, -53, -41, -57, -67, -64, -69, -60, -63, -63, -68, -59, -62, -61, -66, -59, -58, -61, -65, -57, -56, -61, -63, -56, -53, -60, -61, -55, -53, -59, -60, -56, -54, -59, -58, -58, -59, -53, -50, -57, -56, -52, -49, -58, -54, -54, -48, -57, -53, -52, -48, -57, -49, -53, -46, -57, -49, -51, -44, -56, -47, -51, -44, -56, -50, -51, -43, -58, -71, -66, -71, -59, -68, -65, -69, -62, -63, -64, -69, -61, -62, -64, -67, -60, -58, -62, -66, -59, -58, -61, -63, -57, -55, -59, -61, -58, -56, -60, -60, -60, -59, -53, -51, -57, -55, -54, -51, -58, -55, -54, -50, -59, -53, -54, -50, -58, -51, -53, -47, -57, -49, -51, -46, -55, -50, -52, -46, -57, -51, -51, -46, -58, -77, -72, -80, -69, -72, -70, -80, -68, -71, -73, -76, -69, -69, -71, -76, -67, -66, -68, -73, -65, -64, -68, -70, -63, -63, -67, -69, -65, -62, -66, -66, -65]
def frame_extractor(frames):
    if len(frames)%2 == 0:
        page0 = frames[::2] # even indexes
        page1 = frames[1::2] # odd indexes
        
        page0_mask = gen_page0()[:-64]
        page1_mask = gen_page1()[:-64]
        # print(frames)
        # print(page0_mask)
        # print(len(page0_mask))
        # print(len(page1_mask))
        # print(len(frames[0]))
        # print(len(frames))
        full_frames = [[0 for _ in range(len(frames[0]))]for _ in range(len(frames) // 2)]
        # for index in range(0,len(frames),2):
        for index, frame in enumerate(frames):
            print(f"len frame {len(frame)}, ind{index}")

            mask = page0_mask if (index % 2 == 0) else page1_mask
            for i, val in enumerate(frame):
                if (mask[i] == 1):
                    full_frames[index//2][i] = val

        print(f"total frames processed, {len(full_frames)}")
        # [print(f"frame: {val}") for val in full_frames]
        return full_frames


    else:
        print(f"ERROR: Got an odd number of subpages, {len(frames)}")


def frame_offset(frames):
    for n, frame in enumerate(frames):
        for i, val in enumerate(frame):
            frames[n][i] = frames[n][i] - to_signed(eeData[i+64], 16)
    return frames

def generate_ffc_offset(frame):
    mean_frame = sum(frame) // len(frame)
    print(mean_frame)
    print(round(mean_frame))
    print(f"ffc frame: {frame}")
    return mean_frame

def dead_pixels_detect():
    dead_pixels = []
    for i,val in enumerate(eeData[64:]):
        if val == 0:
            dead_pixels.append(i)
    return dead_pixels

def generate_average_ffc_offset(frames):
    frames_avg = 0
    frames_pixel_ffc = []
    dead_pixels = dead_pixels_detect()

    #frame average
    for frame in frames:
        for dead in dead_pixels:
            frame[dead] = frame[dead-1]
        # doing 3:1 averaging
        frames_avg = (floor(frames_avg * 3 + generate_ffc_offset(frame))) >> 2
    # frames_avg = floor(sum(frames_avg) // len(frames_avg))

    #pixel averages
    for pixel in range(len(frames[0])):
        pixel_avg = 0
        for frame in frames:
            # pixel_avg += frame[pixel]
            pixel_avg = (pixel_avg*3 + frame[pixel]) >> 2
            
        # pixel_avg = floor(pixel_avg/len(frames))
        frames_pixel_ffc.append(pixel_avg)

    # print(f"len_avg: {len(frames_avg)}")
    # print(f"len_pixel_avg: {len(frames_pixel_ffc)}")
    print(f"avg: {frames_avg}")
    print(f"pixel_avg: {frames_pixel_ffc}")

def ffc_offset(frames, pixel_mean, ffc_frame):
    for n, frame in enumerate(frames):
        for i, val in enumerate(frame):
            frames[n][i] = frames[n][i] + pixel_mean - ffc_frame[i]
    return frames

def cleanup_frame_dump(frames):
    signed_frames = []
    for frame in frames:
        signed_frame = []
        for val in frame:
            signed_frame.append(to_signed(16, val))
        signed_frames.append(signed_frame)
    return signed_frames
        
def main():
    ser = serial.Serial('/dev/ttyUSB1', 115200)
    frames = get_dump(ser,4) # from serial

    # frames = cleanup_frame_dump(frame_dump) # from rp2040 micro
    # frames = cleanup_frame_dump(frame_dump2) # from rp2040 micro
    # full_frames = frames
    # print(frames)

    full_frames = frame_extractor(frames)
    full_frames = frame_offset(full_frames)

    # generate_average_ffc_offset(full_frames)
    # full_frames = ffc_offset(full_frames,ffc_frame_mean,ffc_frame)
    # full_frames = ffc_offset(full_frames,ffc_frame_mean_single,ffc_frame_single)


    for i in range(0,len(frames),2):
        if frames[i] == frames[i+1]:
            print(f"frame {i//2} subpixels are both equal")
        else:
            print(f"frame {i//2} subpixels are not equal")

    # display code
    all_values = np.concatenate(frames)
    pixel_min = np.percentile(all_values, 2)
    pixel_max = np.percentile(all_values, 98)

    fig, axs = plt.subplots(2, 2, figsize=(8, 6))

    for i, ax in enumerate(axs.flat):
        image = np.array(full_frames[i], dtype=np.int16).reshape((24, 32))
        im = ax.imshow(image, cmap='gray', interpolation='nearest', vmin=pixel_min, vmax=pixel_max)
        ax.set_title(f"Frame {i+1}")
        ax.axis('off')

    fig.colorbar(im, ax=axs, orientation='vertical', fraction=0.02, pad=0.04)
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    main()
